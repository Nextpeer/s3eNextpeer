/*
 * Copyright (C) 2001-2011 Ideaworks3D Ltd.
 * All Rights Reserved.
 *
 * This document is protected by copyright, and contains information
 * proprietary to Ideaworks Labs.
 * This file consists of source code released by Ideaworks Labs under
 * the terms of the accompanying End User License Agreement (EULA).
 * Please do not use this program/source code before you have read the
 * EULA and have agreed to be bound by its terms.
 */
/*
 * WARNING: this is an autogenerated file and will be overwritten by
 * the extension interface script.
 */
#ifndef S3E_EXT_NEXTPEER_H
#define S3E_EXT_NEXTPEER_H

#include <s3eTypes.h>

#define S3E_NEXTPEER_STRING_MAX_1 50

/**
 * Enumeration for various callbacks in the s3eNextpeer extension
 */
typedef enum s3eNextperCallback
{
    S3E_NEXTPEER_CALLBACK_DID_TOURNAMENT_START,
    S3E_NEXTPEER_CALLBACK_DID_TOURNAMENT_END,
    S3E_NEXTPEER_CALLBACK_DASHBOARD_WILL_APPEAR,
    S3E_NEXTPEER_CALLBACK_DASHBOARD_DID_APPEAR,
    S3E_NEXTPEER_CALLBACK_DASHBOARD_WILL_DISAPPEAR,
    S3E_NEXTPEER_CALLBACK_DASHBOARD_DID_DISAPPEAR,
    S3E_NEXTPEER_CALLBACK_DASHBOARD_RETURN_TO_GAME,
    S3E_NEXTPEER_CALLBACK_WILL_TOURNAMENT_START,
    S3E_NEXTPEER_CALLBACK_DID_RECEIVE_CUSTOM_MESSAGE,
    S3E_NEXTPEER_CALLBACK_MAX
} s3eNextperCallback;


/**
 * Structure to hold tournament info for callbacks. For now holds only the UUID and the time.
 * 
 * @see s3eNextpeerTournamentStartCallback
 */
typedef struct s3eNextpeerTournamentStartData {
	char* m_tournamentUuid; // Tournament UUID
	int m_tournamentSeconds; // Tournament time in seconds
} s3eNextpeerTournamentStartData;

/**
 * Structure to hold custom message data for callbacks
 * 
 */
typedef struct s3eNextpeerCustomMessageData {
	char* m_playerName; // Sender's name
    void* m_playerImageData; // Sender's image data
    uint32 m_playerImageDataLen; // Sender's image data length
	void* m_dataReceived; // Data being sent
    uint32 m_dataReceivedLen; // Data length
} s3eNextpeerCustomMessageData;
// \cond HIDDEN_DEFINES
S3E_BEGIN_C_DECL
// \endcond

/**
 * Returns S3E_TRUE if the Nextpeer extension is available.
 */
s3eBool s3eNextpeerAvailable();

void s3eNextpeerInitWithProductKey(const char* productKey);

void s3eNextpeerLaunchDashboard();

void s3eNextpeerDismissDashboard();

void s3eNextpeerShutDown();

void s3eNextpeerReportScoreForCurrentTournament(uint32 score);

s3eBool s3eNextpeerIsCurrentlyInTournament();

uint32 s3eNextpeerTimeLeftInTournament();

void s3eNextpeerReportForfeitForCurrentTournament();

void s3eNextpeerPushDataToOtherPlayers(const void* data, uint32 length);

s3eResult s3eNextpeerRegisterCallback(s3eNextperCallback cbid, s3eCallback fn, void* pData);

s3eResult s3eNextpeerUnRegisterCallback(s3eNextperCallback cbid, s3eCallback fn);

S3E_END_C_DECL

#endif /* !S3E_EXT_NEXTPEER_H */
