#########################################################################
# 
# Nextpeer CONFIDENTIAL
# __________________
# 
#  [2011] - [2012] Innobell MS  
#  All Rights Reserved.
# 
# NOTICE:  All information contained herein is, and remains
# the property of Innobell MS and its suppliers,
# if any.  The intellectual and technical concepts contained
# herein are proprietary to Innobell MS
# and its suppliers and may be covered by U.S. and Foreign Patents,
# patents in process, and are protected by trade secret or copyright law.
# Dissemination of this information or reproduction of this material
# is strictly forbidden unless prior written permission is obtained
# from Innobell MS.
#########################################################################

include:

#include <s3eTypes.h>

#define S3E_NEXTPEER_STRING_MAX_1 50

/**
 * Enumeration for various callbacks in the s3eNextpeer extension
 */
typedef enum s3eNextperCallback
{
    S3E_NEXTPEER_CALLBACK_DID_TOURNAMENT_START,
    S3E_NEXTPEER_CALLBACK_DID_TOURNAMENT_END,
    S3E_NEXTPEER_CALLBACK_MAX
} s3eNextperCallback;


/**
 * Structure to hold tournament info for callbacks. For now holds only the UUID and the time.
 * 
 * @see s3eNextpeerTournamentStartCallback
 */
typedef struct s3eNextpeerTournamentStartData {
	char m_tournamentUuid[S3E_NEXTPEER_STRING_MAX_1]; // Tournament UUID
	int m_tournamentSeconds; // Tournament time in seconds
} s3eNextpeerTournamentStartData;


// Function pointers
typedef void (*s3eNextpeerCBDidTournamentStartWithDetails)(s3eNextpeerTournamentStartData* ); // -(void)nextpeerDidTournamentStartWithDetails:(NPTournamentStartDataContainer *)tournamentContainer
typedef void (*s3eNextpeerCBDidTournamentEnd)(); // -(void)nextpeerDidTournamentEnd

typedef struct s3eNextpeerDelegate {
	// Callback function for tournament start
	s3eNextpeerCBDidTournamentStartWithDetails m_didTournamentStartCallback;
	
	// Callback function for tournament end
	s3eNextpeerCBDidTournamentEnd m_didTournamentEndCallback;
	
} s3eNextpeerDelegate;

typedef struct s3eNextpeerDelegatesContainer {
	// Nextpeer delegate
	s3eNextpeerDelegate m_NextpeerDelegate;
	
} s3eNextpeerDelegatesContainer;


functions:

// Nextpeer related functions
void s3eNextpeerInitWithProductKeyAndDelegatesContainer(const char* productKey, const s3eNextpeerDelegatesContainer* delegatesContainer) void run_on_os_thread
void s3eNextpeerLaunchDashboard() void run_on_os_thread
void s3eNextpeerShutDown() void run_on_os_thread

// Generic functions for meta usage
s3eResult s3eNextpeerRegisterCallback(s3eNextperCallback cbid, s3eCallback fn, void* pData);
s3eResult s3eNextpeerUnRegisterCallback(s3eNextperCallback cbid, s3eCallback fn);